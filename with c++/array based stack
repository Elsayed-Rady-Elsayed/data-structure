#include<iostream>
using namespace std;
const int MAX_SIZE = 1000;
/// <summary>
/// stack imp
/// </array based stack>
/// LIFO (last in first out)
/// <returns>list of items</returns>
template<class T>
class stackByArray {
private:
	int top=-1;
	T arr[MAX_SIZE];
public:
	stackByArray() {
		top = -1;
	}
	void push(T value) {
		if (isFull()) {
			cout << "full array" << endl;
		}
		else {
			arr[++top] = value;
		}
	}
	T pop() {
		if (isEmpty()) {
			cout << "empty stack" << endl;
		}
		else {
			T popedValue = arr[top--];
			return popedValue;
		}
		return -1;
	}
	bool isEmpty() {
		return top == -1;
	}
	T peek() {
		if (isEmpty()) {
			cout << "empty stack" << endl;
			return -1;
		}
		else {
			return arr[top];
		}
	}
	bool isFull() {
		return top >= MAX_SIZE - 1;
	}
	void print() {
		cout << "[";
		for (int i = top; i >= 0; i--) {
			cout << arr[i] << " ";
		}
		cout << "]\n";
	}
};
bool isEqual(char open, char close) {
	if (open == '[' && close == ']')return true;
	else if (open == '{' && close == '}')return true;
	else if (open == '(' && close == ')')return true;
	else return false;
}
bool isBalanced(string exp) {
	stack<char>stk;
	for (int i = 0; i < exp.length(); i++) {
		if (exp[i] == '[' || exp[i] == '{' || exp[i] == '(') {
			stk.push(exp[i]);
		}
		else if(exp[i] == ']' || exp[i] == '}' ||exp[i] ==')') {
			if(stk.empty() || !isEqual(stk.top(), exp[i])) {
				return false;
			}
			else{
				stk.pop();
			}
		}
	}
	return stk.empty() ? true : false;
}
int priority(char ch) {
	if (ch == '^')
		return 3;
	else if (ch == '/' || ch == '*')
		return 2;
	else if (ch == '+' || ch == '-')
		return 1;
	else return -1;
}
string PostFixExpression(string infix){
	string res = "";
	stack<char>stk;
	
	for (int i = 0; i < infix.length(); i++) {
		char ch = infix[i];
		if( ch >= 'a' && ch<='z' || ch == 'A' && ch == 'Z' || ch>= '0' && ch <='9'){
			res += ch;
		}
		else if (ch == '(') {
			stk.push('(');
		}
		else if (ch == ')') {
			while (stk.top() != '(') {
				res += stk.top();
				stk.pop();
			}
		}
		else {
			while (!stk.empty() && priority(ch) <= priority(stk.top())) {
				res += stk.top();
				stk.pop();
			}
			stk.push(ch);
		}
	}
	while (!stk.empty()){
		res += stk.top();
		stk.pop();
	}
	return res;
}
int main() {
    stackByArray<int>stk;
    stk.push(1);
    stk.push(2);
    stk.push(3);
    stk.push(4);
    stk.push(5);
    stk.print();
    int x = stk.pop();
    cout<<x<<endl;
	return 0;
}
